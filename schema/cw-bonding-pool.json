{
  "contract_name": "cw-bonding-pool",
  "contract_version": "0.1.0",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "type": "object",
    "required": [
      "curve_type",
      "max_supply",
      "reserve_decimals",
      "reserve_denom",
      "supply_decimals",
      "supply_subdenom"
    ],
    "properties": {
      "curve_type": {
        "description": "enum to store the curve parameters used for this contract if you want to add a custom Curve, you should make a new contract that imports this one. write a custom `instantiate`, and then dispatch `your::execute` -> `cw20_bonding::do_execute` with your custom curve as a parameter (and same with `query` -> `do_query`)",
        "allOf": [
          {
            "$ref": "#/definitions/CurveType"
          }
        ]
      },
      "max_supply": {
        "$ref": "#/definitions/Uint128"
      },
      "reserve_decimals": {
        "description": "number of decimal places for the reserve token, needed for proper curve math. Same format as decimals above, eg. if it is uatom, where 1 unit is 10^-6 ATOM, use 6 here",
        "type": "integer",
        "format": "uint8",
        "minimum": 0.0
      },
      "reserve_denom": {
        "description": "this is the reserve token denom (only support native for now)",
        "type": "string"
      },
      "simulation_mode": {
        "type": [
          "boolean",
          "null"
        ]
      },
      "supply_decimals": {
        "description": "number of decimal places of the supply token, needed for proper curve math. If it is eg. BTC, where a balance of 10^8 means 1 BTC, then use 8 here.",
        "type": "integer",
        "format": "uint8",
        "minimum": 0.0
      },
      "supply_subdenom": {
        "type": "string"
      },
      "test_mode": {
        "description": "Enable if you want to test the contract without cosmwasmpool",
        "type": [
          "boolean",
          "null"
        ]
      }
    },
    "additionalProperties": false,
    "definitions": {
      "CurveType": {
        "oneOf": [
          {
            "description": "Constant always returns `value * 10^-scale` as spot price",
            "type": "object",
            "required": [
              "constant"
            ],
            "properties": {
              "constant": {
                "type": "object",
                "required": [
                  "scale",
                  "value"
                ],
                "properties": {
                  "scale": {
                    "type": "integer",
                    "format": "uint32",
                    "minimum": 0.0
                  },
                  "value": {
                    "$ref": "#/definitions/Uint128"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Linear returns `slope * 10^-scale * supply` as spot price",
            "type": "object",
            "required": [
              "linear"
            ],
            "properties": {
              "linear": {
                "type": "object",
                "required": [
                  "scale",
                  "slope"
                ],
                "properties": {
                  "scale": {
                    "type": "integer",
                    "format": "uint32",
                    "minimum": 0.0
                  },
                  "slope": {
                    "$ref": "#/definitions/Uint128"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "SquareRoot returns `slope * 10^-scale * supply^0.5` as spot price",
            "type": "object",
            "required": [
              "square_root"
            ],
            "properties": {
              "square_root": {
                "type": "object",
                "required": [
                  "scale",
                  "slope"
                ],
                "properties": {
                  "scale": {
                    "type": "integer",
                    "format": "uint32",
                    "minimum": 0.0
                  },
                  "slope": {
                    "$ref": "#/definitions/Uint128"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "SquareRootCubed returns `f(x) = slope * ((x * 10^-scale)^(1/2))^3`",
            "type": "object",
            "required": [
              "square_root_cubed"
            ],
            "properties": {
              "square_root_cubed": {
                "type": "object",
                "required": [
                  "scale",
                  "slope"
                ],
                "properties": {
                  "scale": {
                    "type": "integer",
                    "format": "uint32",
                    "minimum": 0.0
                  },
                  "slope": {
                    "$ref": "#/definitions/Uint128"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "CubeRootSquared returns `f(x) = slope * ((x * 10^-scale)^(1/3))^2`",
            "type": "object",
            "required": [
              "cube_root_squared"
            ],
            "properties": {
              "cube_root_squared": {
                "type": "object",
                "required": [
                  "scale",
                  "slope"
                ],
                "properties": {
                  "scale": {
                    "type": "integer",
                    "format": "uint32",
                    "minimum": 0.0
                  },
                  "slope": {
                    "$ref": "#/definitions/Uint128"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      }
    }
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "dissolve"
        ],
        "properties": {
          "dissolve": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "sudo"
        ],
        "properties": {
          "sudo": {
            "$ref": "#/definitions/SudoMsg"
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "simulate"
        ],
        "properties": {
          "simulate": {
            "$ref": "#/definitions/SimulationMsg"
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "BondingPoolState": {
        "type": "object",
        "required": [
          "curve_state",
          "curve_type",
          "dissolved_curve_state",
          "is_active"
        ],
        "properties": {
          "curve_state": {
            "$ref": "#/definitions/CurveState"
          },
          "curve_type": {
            "$ref": "#/definitions/CurveType"
          },
          "dissolved_curve_state": {
            "$ref": "#/definitions/CurveState"
          },
          "is_active": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "Coin": {
        "type": "object",
        "required": [
          "amount",
          "denom"
        ],
        "properties": {
          "amount": {
            "$ref": "#/definitions/Uint128"
          },
          "denom": {
            "type": "string"
          }
        }
      },
      "CurveState": {
        "description": "Supply is dynamic and tracks the current supply of staked and ERC20 tokens.",
        "type": "object",
        "required": [
          "decimals",
          "reserve",
          "reserve_denom",
          "supply",
          "supply_denom"
        ],
        "properties": {
          "decimals": {
            "$ref": "#/definitions/DecimalPlaces"
          },
          "reserve": {
            "description": "reserve is how many native tokens exist bonded to the validator",
            "allOf": [
              {
                "$ref": "#/definitions/Uint128"
              }
            ]
          },
          "reserve_denom": {
            "type": "string"
          },
          "supply": {
            "description": "supply is how many tokens this contract has issued",
            "allOf": [
              {
                "$ref": "#/definitions/Uint128"
              }
            ]
          },
          "supply_denom": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "CurveType": {
        "oneOf": [
          {
            "description": "Constant always returns `value * 10^-scale` as spot price",
            "type": "object",
            "required": [
              "constant"
            ],
            "properties": {
              "constant": {
                "type": "object",
                "required": [
                  "scale",
                  "value"
                ],
                "properties": {
                  "scale": {
                    "type": "integer",
                    "format": "uint32",
                    "minimum": 0.0
                  },
                  "value": {
                    "$ref": "#/definitions/Uint128"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Linear returns `slope * 10^-scale * supply` as spot price",
            "type": "object",
            "required": [
              "linear"
            ],
            "properties": {
              "linear": {
                "type": "object",
                "required": [
                  "scale",
                  "slope"
                ],
                "properties": {
                  "scale": {
                    "type": "integer",
                    "format": "uint32",
                    "minimum": 0.0
                  },
                  "slope": {
                    "$ref": "#/definitions/Uint128"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "SquareRoot returns `slope * 10^-scale * supply^0.5` as spot price",
            "type": "object",
            "required": [
              "square_root"
            ],
            "properties": {
              "square_root": {
                "type": "object",
                "required": [
                  "scale",
                  "slope"
                ],
                "properties": {
                  "scale": {
                    "type": "integer",
                    "format": "uint32",
                    "minimum": 0.0
                  },
                  "slope": {
                    "$ref": "#/definitions/Uint128"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "SquareRootCubed returns `f(x) = slope * ((x * 10^-scale)^(1/2))^3`",
            "type": "object",
            "required": [
              "square_root_cubed"
            ],
            "properties": {
              "square_root_cubed": {
                "type": "object",
                "required": [
                  "scale",
                  "slope"
                ],
                "properties": {
                  "scale": {
                    "type": "integer",
                    "format": "uint32",
                    "minimum": 0.0
                  },
                  "slope": {
                    "$ref": "#/definitions/Uint128"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "CubeRootSquared returns `f(x) = slope * ((x * 10^-scale)^(1/3))^2`",
            "type": "object",
            "required": [
              "cube_root_squared"
            ],
            "properties": {
              "cube_root_squared": {
                "type": "object",
                "required": [
                  "scale",
                  "slope"
                ],
                "properties": {
                  "scale": {
                    "type": "integer",
                    "format": "uint32",
                    "minimum": 0.0
                  },
                  "slope": {
                    "$ref": "#/definitions/Uint128"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Decimal": {
        "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
        "type": "string"
      },
      "DecimalPlaces": {
        "description": "DecimalPlaces should be passed into curve constructors",
        "type": "object",
        "required": [
          "reserve",
          "supply"
        ],
        "properties": {
          "reserve": {
            "description": "Number of decimal places for the reserve token (eg. 6 for uatom, 9 for nstep, 18 for wei)",
            "type": "integer",
            "format": "uint32",
            "minimum": 0.0
          },
          "supply": {
            "description": "Number of decimal places for the supply token (this is what was passed in cw20-base instantiate",
            "type": "integer",
            "format": "uint32",
            "minimum": 0.0
          }
        },
        "additionalProperties": false
      },
      "SimulationMsg": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "set_state"
            ],
            "properties": {
              "set_state": {
                "type": "object",
                "required": [
                  "state"
                ],
                "properties": {
                  "state": {
                    "$ref": "#/definitions/BondingPoolState"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "SudoMsg": {
        "description": "------------------  ------------------ SUDO MSGS ------------------  ------------------",
        "oneOf": [
          {
            "description": "SetActive sets the active status of the pool.",
            "type": "object",
            "required": [
              "set_active"
            ],
            "properties": {
              "set_active": {
                "type": "object",
                "required": [
                  "is_active"
                ],
                "properties": {
                  "is_active": {
                    "type": "boolean"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "SwapExactAmountIn swaps an exact amount of tokens in for as many tokens out as possible. The amount of tokens out is determined by the current exchange rate and the swap fee. The user specifies a minimum amount of tokens out, and the transaction will revert if that amount of tokens is not received.",
            "type": "object",
            "required": [
              "swap_exact_amount_in"
            ],
            "properties": {
              "swap_exact_amount_in": {
                "type": "object",
                "required": [
                  "sender",
                  "swap_fee",
                  "token_in",
                  "token_out_denom",
                  "token_out_min_amount"
                ],
                "properties": {
                  "sender": {
                    "type": "string"
                  },
                  "swap_fee": {
                    "$ref": "#/definitions/Decimal"
                  },
                  "token_in": {
                    "$ref": "#/definitions/Coin"
                  },
                  "token_out_denom": {
                    "type": "string"
                  },
                  "token_out_min_amount": {
                    "$ref": "#/definitions/Uint128"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "description": "SwapExactAmountOut swaps as many tokens in as possible for an exact amount of tokens out. The amount of tokens in is determined by the current exchange rate and the swap fee. The user specifies a maximum amount of tokens in, and the transaction will revert if that amount of tokens is exceeded.",
            "type": "object",
            "required": [
              "swap_exact_amount_out"
            ],
            "properties": {
              "swap_exact_amount_out": {
                "type": "object",
                "required": [
                  "sender",
                  "swap_fee",
                  "token_in_denom",
                  "token_in_max_amount",
                  "token_out"
                ],
                "properties": {
                  "sender": {
                    "type": "string"
                  },
                  "swap_fee": {
                    "$ref": "#/definitions/Decimal"
                  },
                  "token_in_denom": {
                    "type": "string"
                  },
                  "token_in_max_amount": {
                    "$ref": "#/definitions/Uint128"
                  },
                  "token_out": {
                    "$ref": "#/definitions/Coin"
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      }
    }
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "oneOf": [
      {
        "description": "GetSwapFee returns the pool's swap fee, based on the current state. Pools may choose to make their swap fees dependent upon state (prior TWAPs, network downtime, other pool states, etc.) This is intended to be fee that is collected by liquidity providers. If the contract provider wants to collect fee for itself, it should implement its own fee collection mechanism.",
        "type": "object",
        "required": [
          "get_swap_fee"
        ],
        "properties": {
          "get_swap_fee": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Returns whether the pool has swaps enabled at the moment",
        "type": "object",
        "required": [
          "is_active"
        ],
        "properties": {
          "is_active": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "GetTotalShares returns the total number of LP shares in the pool GetTotalPoolLiquidity returns the coins in the pool owned by all LPs",
        "type": "object",
        "required": [
          "get_total_pool_liquidity"
        ],
        "properties": {
          "get_total_pool_liquidity": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Returns the spot price of the 'base asset' in terms of the 'quote asset' in the pool, errors if either baseAssetDenom, or quoteAssetDenom does not exist. For example, if this was a UniV2 50-50 pool, with 2 ETH, and 8000 UST pool.SpotPrice(ctx, \"eth\", \"ust\") = 4000.00",
        "type": "object",
        "required": [
          "spot_price"
        ],
        "properties": {
          "spot_price": {
            "type": "object",
            "required": [
              "base_asset_denom",
              "quote_asset_denom"
            ],
            "properties": {
              "base_asset_denom": {
                "type": "string"
              },
              "quote_asset_denom": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "CalcOutAmtGivenIn calculates the amount of tokenOut given tokenIn and the pool's current state. Returns error if the given pool is not a CFMM pool. Returns error on internal calculations.",
        "type": "object",
        "required": [
          "calc_out_amt_given_in"
        ],
        "properties": {
          "calc_out_amt_given_in": {
            "type": "object",
            "required": [
              "swap_fee",
              "token_in",
              "token_out_denom"
            ],
            "properties": {
              "swap_fee": {
                "$ref": "#/definitions/Decimal"
              },
              "token_in": {
                "$ref": "#/definitions/Coin"
              },
              "token_out_denom": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "CalcInAmtGivenOut calculates the amount of tokenIn given tokenOut and the pool's current state. Returns error if the given pool is not a CFMM pool. Returns error on internal calculations.",
        "type": "object",
        "required": [
          "calc_in_amt_given_out"
        ],
        "properties": {
          "calc_in_amt_given_out": {
            "type": "object",
            "required": [
              "swap_fee",
              "token_in_denom",
              "token_out"
            ],
            "properties": {
              "swap_fee": {
                "$ref": "#/definitions/Decimal"
              },
              "token_in_denom": {
                "type": "string"
              },
              "token_out": {
                "$ref": "#/definitions/Coin"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "bonding_pool_state"
        ],
        "properties": {
          "bonding_pool_state": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "Coin": {
        "type": "object",
        "required": [
          "amount",
          "denom"
        ],
        "properties": {
          "amount": {
            "$ref": "#/definitions/Uint128"
          },
          "denom": {
            "type": "string"
          }
        }
      },
      "Decimal": {
        "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
        "type": "string"
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      }
    }
  },
  "migrate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "MigrateMsg",
    "type": "string",
    "enum": []
  },
  "sudo": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "SudoMsg",
    "description": "------------------  ------------------ SUDO MSGS ------------------  ------------------",
    "oneOf": [
      {
        "description": "SetActive sets the active status of the pool.",
        "type": "object",
        "required": [
          "set_active"
        ],
        "properties": {
          "set_active": {
            "type": "object",
            "required": [
              "is_active"
            ],
            "properties": {
              "is_active": {
                "type": "boolean"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "SwapExactAmountIn swaps an exact amount of tokens in for as many tokens out as possible. The amount of tokens out is determined by the current exchange rate and the swap fee. The user specifies a minimum amount of tokens out, and the transaction will revert if that amount of tokens is not received.",
        "type": "object",
        "required": [
          "swap_exact_amount_in"
        ],
        "properties": {
          "swap_exact_amount_in": {
            "type": "object",
            "required": [
              "sender",
              "swap_fee",
              "token_in",
              "token_out_denom",
              "token_out_min_amount"
            ],
            "properties": {
              "sender": {
                "type": "string"
              },
              "swap_fee": {
                "$ref": "#/definitions/Decimal"
              },
              "token_in": {
                "$ref": "#/definitions/Coin"
              },
              "token_out_denom": {
                "type": "string"
              },
              "token_out_min_amount": {
                "$ref": "#/definitions/Uint128"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "SwapExactAmountOut swaps as many tokens in as possible for an exact amount of tokens out. The amount of tokens in is determined by the current exchange rate and the swap fee. The user specifies a maximum amount of tokens in, and the transaction will revert if that amount of tokens is exceeded.",
        "type": "object",
        "required": [
          "swap_exact_amount_out"
        ],
        "properties": {
          "swap_exact_amount_out": {
            "type": "object",
            "required": [
              "sender",
              "swap_fee",
              "token_in_denom",
              "token_in_max_amount",
              "token_out"
            ],
            "properties": {
              "sender": {
                "type": "string"
              },
              "swap_fee": {
                "$ref": "#/definitions/Decimal"
              },
              "token_in_denom": {
                "type": "string"
              },
              "token_in_max_amount": {
                "$ref": "#/definitions/Uint128"
              },
              "token_out": {
                "$ref": "#/definitions/Coin"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "Coin": {
        "type": "object",
        "required": [
          "amount",
          "denom"
        ],
        "properties": {
          "amount": {
            "$ref": "#/definitions/Uint128"
          },
          "denom": {
            "type": "string"
          }
        }
      },
      "Decimal": {
        "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
        "type": "string"
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      }
    }
  },
  "responses": {
    "bonding_pool_state": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "BondingPoolState",
      "type": "object",
      "required": [
        "curve_state",
        "curve_type",
        "dissolved_curve_state",
        "is_active"
      ],
      "properties": {
        "curve_state": {
          "$ref": "#/definitions/CurveState"
        },
        "curve_type": {
          "$ref": "#/definitions/CurveType"
        },
        "dissolved_curve_state": {
          "$ref": "#/definitions/CurveState"
        },
        "is_active": {
          "type": "boolean"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "CurveState": {
          "description": "Supply is dynamic and tracks the current supply of staked and ERC20 tokens.",
          "type": "object",
          "required": [
            "decimals",
            "reserve",
            "reserve_denom",
            "supply",
            "supply_denom"
          ],
          "properties": {
            "decimals": {
              "$ref": "#/definitions/DecimalPlaces"
            },
            "reserve": {
              "description": "reserve is how many native tokens exist bonded to the validator",
              "allOf": [
                {
                  "$ref": "#/definitions/Uint128"
                }
              ]
            },
            "reserve_denom": {
              "type": "string"
            },
            "supply": {
              "description": "supply is how many tokens this contract has issued",
              "allOf": [
                {
                  "$ref": "#/definitions/Uint128"
                }
              ]
            },
            "supply_denom": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        "CurveType": {
          "oneOf": [
            {
              "description": "Constant always returns `value * 10^-scale` as spot price",
              "type": "object",
              "required": [
                "constant"
              ],
              "properties": {
                "constant": {
                  "type": "object",
                  "required": [
                    "scale",
                    "value"
                  ],
                  "properties": {
                    "scale": {
                      "type": "integer",
                      "format": "uint32",
                      "minimum": 0.0
                    },
                    "value": {
                      "$ref": "#/definitions/Uint128"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            {
              "description": "Linear returns `slope * 10^-scale * supply` as spot price",
              "type": "object",
              "required": [
                "linear"
              ],
              "properties": {
                "linear": {
                  "type": "object",
                  "required": [
                    "scale",
                    "slope"
                  ],
                  "properties": {
                    "scale": {
                      "type": "integer",
                      "format": "uint32",
                      "minimum": 0.0
                    },
                    "slope": {
                      "$ref": "#/definitions/Uint128"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            {
              "description": "SquareRoot returns `slope * 10^-scale * supply^0.5` as spot price",
              "type": "object",
              "required": [
                "square_root"
              ],
              "properties": {
                "square_root": {
                  "type": "object",
                  "required": [
                    "scale",
                    "slope"
                  ],
                  "properties": {
                    "scale": {
                      "type": "integer",
                      "format": "uint32",
                      "minimum": 0.0
                    },
                    "slope": {
                      "$ref": "#/definitions/Uint128"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            {
              "description": "SquareRootCubed returns `f(x) = slope * ((x * 10^-scale)^(1/2))^3`",
              "type": "object",
              "required": [
                "square_root_cubed"
              ],
              "properties": {
                "square_root_cubed": {
                  "type": "object",
                  "required": [
                    "scale",
                    "slope"
                  ],
                  "properties": {
                    "scale": {
                      "type": "integer",
                      "format": "uint32",
                      "minimum": 0.0
                    },
                    "slope": {
                      "$ref": "#/definitions/Uint128"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            },
            {
              "description": "CubeRootSquared returns `f(x) = slope * ((x * 10^-scale)^(1/3))^2`",
              "type": "object",
              "required": [
                "cube_root_squared"
              ],
              "properties": {
                "cube_root_squared": {
                  "type": "object",
                  "required": [
                    "scale",
                    "slope"
                  ],
                  "properties": {
                    "scale": {
                      "type": "integer",
                      "format": "uint32",
                      "minimum": 0.0
                    },
                    "slope": {
                      "$ref": "#/definitions/Uint128"
                    }
                  },
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "DecimalPlaces": {
          "description": "DecimalPlaces should be passed into curve constructors",
          "type": "object",
          "required": [
            "reserve",
            "supply"
          ],
          "properties": {
            "reserve": {
              "description": "Number of decimal places for the reserve token (eg. 6 for uatom, 9 for nstep, 18 for wei)",
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            },
            "supply": {
              "description": "Number of decimal places for the supply token (this is what was passed in cw20-base instantiate",
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            }
          },
          "additionalProperties": false
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "calc_in_amt_given_out": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "CalcInAmtGivenOutResponse",
      "type": "object",
      "required": [
        "token_in"
      ],
      "properties": {
        "token_in": {
          "$ref": "#/definitions/Coin"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Coin": {
          "type": "object",
          "required": [
            "amount",
            "denom"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "denom": {
              "type": "string"
            }
          }
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "calc_out_amt_given_in": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "CalcOutAmtGivenInResponse",
      "type": "object",
      "required": [
        "token_out"
      ],
      "properties": {
        "token_out": {
          "$ref": "#/definitions/Coin"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Coin": {
          "type": "object",
          "required": [
            "amount",
            "denom"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "denom": {
              "type": "string"
            }
          }
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "get_swap_fee": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "GetSwapFeeResponse",
      "type": "object",
      "required": [
        "swap_fee"
      ],
      "properties": {
        "swap_fee": {
          "$ref": "#/definitions/Decimal"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Decimal": {
          "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
          "type": "string"
        }
      }
    },
    "get_total_pool_liquidity": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "TotalPoolLiquidityResponse",
      "type": "object",
      "required": [
        "total_pool_liquidity"
      ],
      "properties": {
        "total_pool_liquidity": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Coin"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Coin": {
          "type": "object",
          "required": [
            "amount",
            "denom"
          ],
          "properties": {
            "amount": {
              "$ref": "#/definitions/Uint128"
            },
            "denom": {
              "type": "string"
            }
          }
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "is_active": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "IsActiveResponse",
      "type": "object",
      "required": [
        "is_active"
      ],
      "properties": {
        "is_active": {
          "type": "boolean"
        }
      },
      "additionalProperties": false
    },
    "spot_price": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "SpotPriceResponse",
      "type": "object",
      "required": [
        "spot_price"
      ],
      "properties": {
        "spot_price": {
          "$ref": "#/definitions/Decimal"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Decimal": {
          "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
          "type": "string"
        }
      }
    }
  }
}
