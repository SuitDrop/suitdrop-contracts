{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "InstantiateMsg",
  "type": "object",
  "required": [
    "curve_type",
    "max_supply",
    "reserve_decimals",
    "reserve_denom",
    "supply_decimals",
    "supply_subdenom"
  ],
  "properties": {
    "curve_type": {
      "description": "enum to store the curve parameters used for this contract if you want to add a custom Curve, you should make a new contract that imports this one. write a custom `instantiate`, and then dispatch `your::execute` -> `cw20_bonding::do_execute` with your custom curve as a parameter (and same with `query` -> `do_query`)",
      "allOf": [
        {
          "$ref": "#/definitions/CurveType"
        }
      ]
    },
    "max_supply": {
      "$ref": "#/definitions/Uint128"
    },
    "reserve_decimals": {
      "description": "number of decimal places for the reserve token, needed for proper curve math. Same format as decimals above, eg. if it is uatom, where 1 unit is 10^-6 ATOM, use 6 here",
      "type": "integer",
      "format": "uint8",
      "minimum": 0.0
    },
    "reserve_denom": {
      "description": "this is the reserve token denom (only support native for now)",
      "type": "string"
    },
    "simulation_mode": {
      "type": [
        "boolean",
        "null"
      ]
    },
    "supply_decimals": {
      "description": "number of decimal places of the supply token, needed for proper curve math. If it is eg. BTC, where a balance of 10^8 means 1 BTC, then use 8 here.",
      "type": "integer",
      "format": "uint8",
      "minimum": 0.0
    },
    "supply_subdenom": {
      "type": "string"
    },
    "test_mode": {
      "description": "Enable if you want to test the contract without cosmwasmpool",
      "type": [
        "boolean",
        "null"
      ]
    }
  },
  "additionalProperties": false,
  "definitions": {
    "CurveType": {
      "oneOf": [
        {
          "description": "Constant always returns `value * 10^-scale` as spot price",
          "type": "object",
          "required": [
            "constant"
          ],
          "properties": {
            "constant": {
              "type": "object",
              "required": [
                "scale",
                "value"
              ],
              "properties": {
                "scale": {
                  "type": "integer",
                  "format": "uint32",
                  "minimum": 0.0
                },
                "value": {
                  "$ref": "#/definitions/Uint128"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Linear returns `slope * 10^-scale * supply` as spot price",
          "type": "object",
          "required": [
            "linear"
          ],
          "properties": {
            "linear": {
              "type": "object",
              "required": [
                "scale",
                "slope"
              ],
              "properties": {
                "scale": {
                  "type": "integer",
                  "format": "uint32",
                  "minimum": 0.0
                },
                "slope": {
                  "$ref": "#/definitions/Uint128"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "SquareRoot returns `slope * 10^-scale * supply^0.5` as spot price",
          "type": "object",
          "required": [
            "square_root"
          ],
          "properties": {
            "square_root": {
              "type": "object",
              "required": [
                "scale",
                "slope"
              ],
              "properties": {
                "scale": {
                  "type": "integer",
                  "format": "uint32",
                  "minimum": 0.0
                },
                "slope": {
                  "$ref": "#/definitions/Uint128"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "SquareRootCubed returns `f(x) = slope * ((x * 10^-scale)^(1/2))^3`",
          "type": "object",
          "required": [
            "square_root_cubed"
          ],
          "properties": {
            "square_root_cubed": {
              "type": "object",
              "required": [
                "scale",
                "slope"
              ],
              "properties": {
                "scale": {
                  "type": "integer",
                  "format": "uint32",
                  "minimum": 0.0
                },
                "slope": {
                  "$ref": "#/definitions/Uint128"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "CubeRootSquared returns `f(x) = slope * ((x * 10^-scale)^(1/3))^2`",
          "type": "object",
          "required": [
            "cube_root_squared"
          ],
          "properties": {
            "cube_root_squared": {
              "type": "object",
              "required": [
                "scale",
                "slope"
              ],
              "properties": {
                "scale": {
                  "type": "integer",
                  "format": "uint32",
                  "minimum": 0.0
                },
                "slope": {
                  "$ref": "#/definitions/Uint128"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
