{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "SudoMsg",
  "description": "------------------  ------------------ SUDO MSGS ------------------  ------------------",
  "oneOf": [
    {
      "description": "SetActive sets the active status of the pool.",
      "type": "object",
      "required": [
        "set_active"
      ],
      "properties": {
        "set_active": {
          "type": "object",
          "required": [
            "is_active"
          ],
          "properties": {
            "is_active": {
              "type": "boolean"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "SwapExactAmountIn swaps an exact amount of tokens in for as many tokens out as possible. The amount of tokens out is determined by the current exchange rate and the swap fee. The user specifies a minimum amount of tokens out, and the transaction will revert if that amount of tokens is not received.",
      "type": "object",
      "required": [
        "swap_exact_amount_in"
      ],
      "properties": {
        "swap_exact_amount_in": {
          "type": "object",
          "required": [
            "sender",
            "swap_fee",
            "token_in",
            "token_out_denom",
            "token_out_min_amount"
          ],
          "properties": {
            "sender": {
              "type": "string"
            },
            "swap_fee": {
              "$ref": "#/definitions/Decimal"
            },
            "token_in": {
              "$ref": "#/definitions/Coin"
            },
            "token_out_denom": {
              "type": "string"
            },
            "token_out_min_amount": {
              "$ref": "#/definitions/Uint128"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "SwapExactAmountOut swaps as many tokens in as possible for an exact amount of tokens out. The amount of tokens in is determined by the current exchange rate and the swap fee. The user specifies a maximum amount of tokens in, and the transaction will revert if that amount of tokens is exceeded.",
      "type": "object",
      "required": [
        "swap_exact_amount_out"
      ],
      "properties": {
        "swap_exact_amount_out": {
          "type": "object",
          "required": [
            "sender",
            "swap_fee",
            "token_in_denom",
            "token_in_max_amount",
            "token_out"
          ],
          "properties": {
            "sender": {
              "type": "string"
            },
            "swap_fee": {
              "$ref": "#/definitions/Decimal"
            },
            "token_in_denom": {
              "type": "string"
            },
            "token_in_max_amount": {
              "$ref": "#/definitions/Uint128"
            },
            "token_out": {
              "$ref": "#/definitions/Coin"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Coin": {
      "type": "object",
      "required": [
        "amount",
        "denom"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "denom": {
          "type": "string"
        }
      }
    },
    "Decimal": {
      "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
      "type": "string"
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
