{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "BondingPoolState",
  "type": "object",
  "required": [
    "curve_state",
    "curve_type",
    "dissolved_curve_state",
    "is_active"
  ],
  "properties": {
    "curve_state": {
      "$ref": "#/definitions/CurveState"
    },
    "curve_type": {
      "$ref": "#/definitions/CurveType"
    },
    "dissolved_curve_state": {
      "$ref": "#/definitions/CurveState"
    },
    "is_active": {
      "type": "boolean"
    }
  },
  "additionalProperties": false,
  "definitions": {
    "CurveState": {
      "description": "Supply is dynamic and tracks the current supply of staked and ERC20 tokens.",
      "type": "object",
      "required": [
        "decimals",
        "reserve",
        "reserve_denom",
        "supply",
        "supply_denom"
      ],
      "properties": {
        "decimals": {
          "$ref": "#/definitions/DecimalPlaces"
        },
        "reserve": {
          "description": "reserve is how many native tokens exist bonded to the validator",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "reserve_denom": {
          "type": "string"
        },
        "supply": {
          "description": "supply is how many tokens this contract has issued",
          "allOf": [
            {
              "$ref": "#/definitions/Uint128"
            }
          ]
        },
        "supply_denom": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "CurveType": {
      "oneOf": [
        {
          "description": "Constant always returns `value * 10^-scale` as spot price",
          "type": "object",
          "required": [
            "constant"
          ],
          "properties": {
            "constant": {
              "type": "object",
              "required": [
                "scale",
                "value"
              ],
              "properties": {
                "scale": {
                  "type": "integer",
                  "format": "uint32",
                  "minimum": 0.0
                },
                "value": {
                  "$ref": "#/definitions/Uint128"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Linear returns `slope * 10^-scale * supply` as spot price",
          "type": "object",
          "required": [
            "linear"
          ],
          "properties": {
            "linear": {
              "type": "object",
              "required": [
                "scale",
                "slope"
              ],
              "properties": {
                "scale": {
                  "type": "integer",
                  "format": "uint32",
                  "minimum": 0.0
                },
                "slope": {
                  "$ref": "#/definitions/Uint128"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "SquareRoot returns `slope * 10^-scale * supply^0.5` as spot price",
          "type": "object",
          "required": [
            "square_root"
          ],
          "properties": {
            "square_root": {
              "type": "object",
              "required": [
                "scale",
                "slope"
              ],
              "properties": {
                "scale": {
                  "type": "integer",
                  "format": "uint32",
                  "minimum": 0.0
                },
                "slope": {
                  "$ref": "#/definitions/Uint128"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "SquareRootCubed returns `f(x) = slope * ((x * 10^-scale)^(1/2))^3`",
          "type": "object",
          "required": [
            "square_root_cubed"
          ],
          "properties": {
            "square_root_cubed": {
              "type": "object",
              "required": [
                "scale",
                "slope"
              ],
              "properties": {
                "scale": {
                  "type": "integer",
                  "format": "uint32",
                  "minimum": 0.0
                },
                "slope": {
                  "$ref": "#/definitions/Uint128"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        },
        {
          "description": "CubeRootSquared returns `f(x) = slope * ((x * 10^-scale)^(1/3))^2`",
          "type": "object",
          "required": [
            "cube_root_squared"
          ],
          "properties": {
            "cube_root_squared": {
              "type": "object",
              "required": [
                "scale",
                "slope"
              ],
              "properties": {
                "scale": {
                  "type": "integer",
                  "format": "uint32",
                  "minimum": 0.0
                },
                "slope": {
                  "$ref": "#/definitions/Uint128"
                }
              },
              "additionalProperties": false
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "DecimalPlaces": {
      "description": "DecimalPlaces should be passed into curve constructors",
      "type": "object",
      "required": [
        "reserve",
        "supply"
      ],
      "properties": {
        "reserve": {
          "description": "Number of decimal places for the reserve token (eg. 6 for uatom, 9 for nstep, 18 for wei)",
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        },
        "supply": {
          "description": "Number of decimal places for the supply token (this is what was passed in cw20-base instantiate",
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        }
      },
      "additionalProperties": false
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
