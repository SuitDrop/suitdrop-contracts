{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "QueryMsg",
  "oneOf": [
    {
      "description": "GetSwapFee returns the pool's swap fee, based on the current state. Pools may choose to make their swap fees dependent upon state (prior TWAPs, network downtime, other pool states, etc.) This is intended to be fee that is collected by liquidity providers. If the contract provider wants to collect fee for itself, it should implement its own fee collection mechanism.",
      "type": "object",
      "required": [
        "get_swap_fee"
      ],
      "properties": {
        "get_swap_fee": {
          "type": "object",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Returns whether the pool has swaps enabled at the moment",
      "type": "object",
      "required": [
        "is_active"
      ],
      "properties": {
        "is_active": {
          "type": "object",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "GetTotalShares returns the total number of LP shares in the pool GetTotalPoolLiquidity returns the coins in the pool owned by all LPs",
      "type": "object",
      "required": [
        "get_total_pool_liquidity"
      ],
      "properties": {
        "get_total_pool_liquidity": {
          "type": "object",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Returns the spot price of the 'base asset' in terms of the 'quote asset' in the pool, errors if either baseAssetDenom, or quoteAssetDenom does not exist. For example, if this was a UniV2 50-50 pool, with 2 ETH, and 8000 UST pool.SpotPrice(ctx, \"eth\", \"ust\") = 4000.00",
      "type": "object",
      "required": [
        "spot_price"
      ],
      "properties": {
        "spot_price": {
          "type": "object",
          "required": [
            "base_asset_denom",
            "quote_asset_denom"
          ],
          "properties": {
            "base_asset_denom": {
              "type": "string"
            },
            "quote_asset_denom": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "CalcOutAmtGivenIn calculates the amount of tokenOut given tokenIn and the pool's current state. Returns error if the given pool is not a CFMM pool. Returns error on internal calculations.",
      "type": "object",
      "required": [
        "calc_out_amt_given_in"
      ],
      "properties": {
        "calc_out_amt_given_in": {
          "type": "object",
          "required": [
            "swap_fee",
            "token_in",
            "token_out_denom"
          ],
          "properties": {
            "swap_fee": {
              "$ref": "#/definitions/Decimal"
            },
            "token_in": {
              "$ref": "#/definitions/Coin"
            },
            "token_out_denom": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "CalcInAmtGivenOut calculates the amount of tokenIn given tokenOut and the pool's current state. Returns error if the given pool is not a CFMM pool. Returns error on internal calculations.",
      "type": "object",
      "required": [
        "calc_in_amt_given_out"
      ],
      "properties": {
        "calc_in_amt_given_out": {
          "type": "object",
          "required": [
            "swap_fee",
            "token_in_denom",
            "token_out"
          ],
          "properties": {
            "swap_fee": {
              "$ref": "#/definitions/Decimal"
            },
            "token_in_denom": {
              "type": "string"
            },
            "token_out": {
              "$ref": "#/definitions/Coin"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "type": "object",
      "required": [
        "bonding_pool_state"
      ],
      "properties": {
        "bonding_pool_state": {
          "type": "object",
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Coin": {
      "type": "object",
      "required": [
        "amount",
        "denom"
      ],
      "properties": {
        "amount": {
          "$ref": "#/definitions/Uint128"
        },
        "denom": {
          "type": "string"
        }
      }
    },
    "Decimal": {
      "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
      "type": "string"
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
