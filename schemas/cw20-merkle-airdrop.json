{
  "contract_name": "cw20-merkle-airdrop",
  "contract_version": "0.2.0-beta.7",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "type": "object",
    "properties": {
      "cw20_token_address": {
        "type": [
          "string",
          "null"
        ]
      },
      "native_token": {
        "type": [
          "string",
          "null"
        ]
      },
      "owner": {
        "description": "Owner if none set to info.sender.",
        "type": [
          "string",
          "null"
        ]
      }
    },
    "additionalProperties": false
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "update_config"
        ],
        "properties": {
          "update_config": {
            "type": "object",
            "properties": {
              "new_cw20_address": {
                "type": [
                  "string",
                  "null"
                ]
              },
              "new_native_token": {
                "type": [
                  "string",
                  "null"
                ]
              },
              "new_owner": {
                "description": "NewOwner if non sent, contract gets locked. Recipients can receive airdrops but owner cannot register new stages.",
                "type": [
                  "string",
                  "null"
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "register_merkle_root"
        ],
        "properties": {
          "register_merkle_root": {
            "type": "object",
            "required": [
              "merkle_root"
            ],
            "properties": {
              "expiration": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/Expiration"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "hrp": {
                "type": [
                  "string",
                  "null"
                ]
              },
              "merkle_root": {
                "description": "MerkleRoot is hex-encoded merkle root.",
                "type": "string"
              },
              "start": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/Scheduled"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "total_amount": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/Uint128"
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Claim does not check if contract has enough funds, owner must ensure it.",
        "type": "object",
        "required": [
          "claim"
        ],
        "properties": {
          "claim": {
            "type": "object",
            "required": [
              "amount",
              "proof",
              "stage"
            ],
            "properties": {
              "amount": {
                "$ref": "#/definitions/Uint128"
              },
              "proof": {
                "description": "Proof is hex-encoded merkle proof.",
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "sig_info": {
                "description": "Enables cross chain airdrops. Target wallet proves identity by sending a signed [SignedClaimMsg](SignedClaimMsg) containing the recipient address.",
                "anyOf": [
                  {
                    "$ref": "#/definitions/SignatureInfo"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "stage": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Burn the remaining tokens in the stage after expiry time (only owner)",
        "type": "object",
        "required": [
          "burn"
        ],
        "properties": {
          "burn": {
            "type": "object",
            "required": [
              "stage"
            ],
            "properties": {
              "stage": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Withdraw the remaining tokens in the stage after expiry time (only owner)",
        "type": "object",
        "required": [
          "withdraw"
        ],
        "properties": {
          "withdraw": {
            "type": "object",
            "required": [
              "address",
              "stage"
            ],
            "properties": {
              "address": {
                "type": "string"
              },
              "stage": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Burn all of the remaining tokens that the contract owns (only owner)",
        "type": "object",
        "required": [
          "burn_all"
        ],
        "properties": {
          "burn_all": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Withdraw all/some of the remaining tokens that the contract owns (only owner)",
        "type": "object",
        "required": [
          "withdraw_all"
        ],
        "properties": {
          "withdraw_all": {
            "type": "object",
            "required": [
              "address"
            ],
            "properties": {
              "address": {
                "type": "string"
              },
              "amount": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/Uint128"
                  },
                  {
                    "type": "null"
                  }
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "pause"
        ],
        "properties": {
          "pause": {
            "type": "object",
            "required": [
              "stage"
            ],
            "properties": {
              "stage": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "resume"
        ],
        "properties": {
          "resume": {
            "type": "object",
            "required": [
              "stage"
            ],
            "properties": {
              "new_expiration": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/Expiration"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "stage": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "Binary": {
        "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>. See also <https://github.com/CosmWasm/cosmwasm/blob/main/docs/MESSAGE_TYPES.md>.",
        "type": "string"
      },
      "Expiration": {
        "description": "Expiration represents a point in time when some event happens. It can compare with a BlockInfo and will return is_expired() == true once the condition is hit (and for every block in the future)",
        "oneOf": [
          {
            "description": "AtHeight will expire when `env.block.height` >= height",
            "type": "object",
            "required": [
              "at_height"
            ],
            "properties": {
              "at_height": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          },
          {
            "description": "AtTime will expire when `env.block.time` >= time",
            "type": "object",
            "required": [
              "at_time"
            ],
            "properties": {
              "at_time": {
                "$ref": "#/definitions/Timestamp"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Never will never expire. Used to express the empty variant",
            "type": "object",
            "required": [
              "never"
            ],
            "properties": {
              "never": {
                "type": "object",
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Scheduled": {
        "description": "Scheduled represents a point in time when an event happens. It can compare with a BlockInfo and will return is_triggered() == true once the condition is hit (and for every block in the future)",
        "oneOf": [
          {
            "description": "AtHeight will schedule when `env.block.height` >= height",
            "type": "object",
            "required": [
              "at_height"
            ],
            "properties": {
              "at_height": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          },
          {
            "description": "AtTime will schedule when `env.block.time` >= time",
            "type": "object",
            "required": [
              "at_time"
            ],
            "properties": {
              "at_time": {
                "$ref": "#/definitions/Timestamp"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "SignatureInfo": {
        "type": "object",
        "required": [
          "claim_msg",
          "signature"
        ],
        "properties": {
          "claim_msg": {
            "$ref": "#/definitions/Binary"
          },
          "signature": {
            "$ref": "#/definitions/Binary"
          }
        },
        "additionalProperties": false
      },
      "Timestamp": {
        "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
        "allOf": [
          {
            "$ref": "#/definitions/Uint64"
          }
        ]
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      },
      "Uint64": {
        "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
        "type": "string"
      }
    }
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "config"
        ],
        "properties": {
          "config": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "merkle_root"
        ],
        "properties": {
          "merkle_root": {
            "type": "object",
            "required": [
              "stage"
            ],
            "properties": {
              "stage": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "latest_stage"
        ],
        "properties": {
          "latest_stage": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "is_claimed"
        ],
        "properties": {
          "is_claimed": {
            "type": "object",
            "required": [
              "address",
              "stage"
            ],
            "properties": {
              "address": {
                "type": "string"
              },
              "stage": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "total_claimed"
        ],
        "properties": {
          "total_claimed": {
            "type": "object",
            "required": [
              "stage"
            ],
            "properties": {
              "stage": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "account_map"
        ],
        "properties": {
          "account_map": {
            "type": "object",
            "required": [
              "external_address",
              "stage"
            ],
            "properties": {
              "external_address": {
                "type": "string"
              },
              "stage": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "all_account_maps"
        ],
        "properties": {
          "all_account_maps": {
            "type": "object",
            "required": [
              "stage"
            ],
            "properties": {
              "limit": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint32",
                "minimum": 0.0
              },
              "stage": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              },
              "start_after": {
                "type": [
                  "string",
                  "null"
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "is_paused"
        ],
        "properties": {
          "is_paused": {
            "type": "object",
            "required": [
              "stage"
            ],
            "properties": {
              "stage": {
                "type": "integer",
                "format": "uint8",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ]
  },
  "migrate": null,
  "sudo": null,
  "responses": {
    "account_map": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "AccountMapResponse",
      "type": "object",
      "required": [
        "external_address",
        "host_address"
      ],
      "properties": {
        "external_address": {
          "type": "string"
        },
        "host_address": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "all_account_maps": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "AllAccountMapResponse",
      "type": "object",
      "required": [
        "address_maps"
      ],
      "properties": {
        "address_maps": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AccountMapResponse"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "AccountMapResponse": {
          "type": "object",
          "required": [
            "external_address",
            "host_address"
          ],
          "properties": {
            "external_address": {
              "type": "string"
            },
            "host_address": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      }
    },
    "config": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ConfigResponse",
      "type": "object",
      "properties": {
        "cw20_token_address": {
          "type": [
            "string",
            "null"
          ]
        },
        "native_token": {
          "type": [
            "string",
            "null"
          ]
        },
        "owner": {
          "type": [
            "string",
            "null"
          ]
        }
      },
      "additionalProperties": false
    },
    "is_claimed": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "IsClaimedResponse",
      "type": "object",
      "required": [
        "is_claimed"
      ],
      "properties": {
        "is_claimed": {
          "type": "boolean"
        }
      },
      "additionalProperties": false
    },
    "is_paused": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "IsPausedResponse",
      "type": "object",
      "required": [
        "is_paused"
      ],
      "properties": {
        "is_paused": {
          "type": "boolean"
        }
      },
      "additionalProperties": false
    },
    "latest_stage": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "LatestStageResponse",
      "type": "object",
      "required": [
        "latest_stage"
      ],
      "properties": {
        "latest_stage": {
          "type": "integer",
          "format": "uint8",
          "minimum": 0.0
        }
      },
      "additionalProperties": false
    },
    "merkle_root": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "MerkleRootResponse",
      "type": "object",
      "required": [
        "expiration",
        "merkle_root",
        "stage",
        "total_amount"
      ],
      "properties": {
        "expiration": {
          "$ref": "#/definitions/Expiration"
        },
        "merkle_root": {
          "description": "MerkleRoot is hex-encoded merkle root.",
          "type": "string"
        },
        "stage": {
          "type": "integer",
          "format": "uint8",
          "minimum": 0.0
        },
        "start": {
          "anyOf": [
            {
              "$ref": "#/definitions/Scheduled"
            },
            {
              "type": "null"
            }
          ]
        },
        "total_amount": {
          "$ref": "#/definitions/Uint128"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Expiration": {
          "description": "Expiration represents a point in time when some event happens. It can compare with a BlockInfo and will return is_expired() == true once the condition is hit (and for every block in the future)",
          "oneOf": [
            {
              "description": "AtHeight will expire when `env.block.height` >= height",
              "type": "object",
              "required": [
                "at_height"
              ],
              "properties": {
                "at_height": {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                }
              },
              "additionalProperties": false
            },
            {
              "description": "AtTime will expire when `env.block.time` >= time",
              "type": "object",
              "required": [
                "at_time"
              ],
              "properties": {
                "at_time": {
                  "$ref": "#/definitions/Timestamp"
                }
              },
              "additionalProperties": false
            },
            {
              "description": "Never will never expire. Used to express the empty variant",
              "type": "object",
              "required": [
                "never"
              ],
              "properties": {
                "never": {
                  "type": "object",
                  "additionalProperties": false
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "Scheduled": {
          "description": "Scheduled represents a point in time when an event happens. It can compare with a BlockInfo and will return is_triggered() == true once the condition is hit (and for every block in the future)",
          "oneOf": [
            {
              "description": "AtHeight will schedule when `env.block.height` >= height",
              "type": "object",
              "required": [
                "at_height"
              ],
              "properties": {
                "at_height": {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                }
              },
              "additionalProperties": false
            },
            {
              "description": "AtTime will schedule when `env.block.time` >= time",
              "type": "object",
              "required": [
                "at_time"
              ],
              "properties": {
                "at_time": {
                  "$ref": "#/definitions/Timestamp"
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "Timestamp": {
          "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        }
      }
    },
    "total_claimed": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "TotalClaimedResponse",
      "type": "object",
      "required": [
        "total_claimed"
      ],
      "properties": {
        "total_claimed": {
          "$ref": "#/definitions/Uint128"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    }
  }
}