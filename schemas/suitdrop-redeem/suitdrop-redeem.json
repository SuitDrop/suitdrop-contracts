{
  "contract_name": "suitdrop-redeem",
  "contract_version": "0.1.0",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "description": "Message type for `instantiate` entry_point",
    "type": "object",
    "required": [
      "bonding_contract_addr",
      "cost_per_unit",
      "nft_code_id",
      "nft_name",
      "nft_receipt_token_uri",
      "nft_symbol",
      "redemption_denom"
    ],
    "properties": {
      "bonding_contract_addr": {
        "type": "string"
      },
      "cost_per_unit": {
        "$ref": "#/definitions/Uint128"
      },
      "nft_code_id": {
        "$ref": "#/definitions/Uint64"
      },
      "nft_name": {
        "type": "string"
      },
      "nft_receipt_token_uri": {
        "type": "string"
      },
      "nft_symbol": {
        "type": "string"
      },
      "redemption_denom": {
        "type": "string"
      }
    },
    "additionalProperties": false,
    "definitions": {
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      },
      "Uint64": {
        "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
        "type": "string"
      }
    }
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "description": "Message type for `execute` entry_point",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "redeem"
        ],
        "properties": {
          "redeem": {
            "type": "object",
            "required": [
              "proof"
            ],
            "properties": {
              "proof": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ]
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "description": "Message type for `query` entry_point",
    "oneOf": [
      {
        "type": "object",
        "required": [
          "redemptions"
        ],
        "properties": {
          "redemptions": {
            "type": "object",
            "properties": {
              "limit": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint32",
                "minimum": 0.0
              },
              "start_after": {
                "type": [
                  "string",
                  "null"
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "redemption"
        ],
        "properties": {
          "redemption": {
            "type": "object",
            "properties": {
              "id": {
                "type": [
                  "string",
                  "null"
                ]
              },
              "proof": {
                "type": [
                  "string",
                  "null"
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "config"
        ],
        "properties": {
          "config": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ]
  },
  "migrate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "MigrateMsg",
    "description": "Message type for `migrate` entry_point",
    "type": "string",
    "enum": []
  },
  "sudo": null,
  "responses": {
    "config": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "ConfigResponse",
      "type": "object",
      "required": [
        "bonding_contract_addr",
        "cost_per_unit",
        "nft_contract_addr",
        "nft_receipt_token_uri",
        "redemption_denom"
      ],
      "properties": {
        "bonding_contract_addr": {
          "type": "string"
        },
        "cost_per_unit": {
          "$ref": "#/definitions/Uint128"
        },
        "nft_contract_addr": {
          "type": "string"
        },
        "nft_receipt_token_uri": {
          "type": "string"
        },
        "redemption_denom": {
          "type": "string"
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "redemption": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Redemption",
      "type": "object",
      "required": [
        "id",
        "proof",
        "redeemer"
      ],
      "properties": {
        "id": {
          "type": "string"
        },
        "proof": {
          "type": "string"
        },
        "redeemer": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "redemptions": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "RedemptionsResponse",
      "type": "object",
      "required": [
        "redemptions"
      ],
      "properties": {
        "redemptions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Redemption"
          }
        }
      },
      "additionalProperties": false,
      "definitions": {
        "Redemption": {
          "type": "object",
          "required": [
            "id",
            "proof",
            "redeemer"
          ],
          "properties": {
            "id": {
              "type": "string"
            },
            "proof": {
              "type": "string"
            },
            "redeemer": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      }
    }
  }
}
